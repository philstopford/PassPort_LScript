20140108 (Triage build)
========

- Added option to preserve scripts generated when rendering scenes/frames.
 - Exposed as preference setting. Not saved in or loaded from scenes or RPE files.

20131218 (Enhancement, Bug fix)
========

- Workaround in last build for camera handling as hotfix. Working on better solution that should also work nicely with 3rd party lights/cameras.

20131217 (Enhancement, Bug fix)
========

- Addressed potential file handle leaks.
- Fixes/enhancements to start/end line search routines.
- Logger now prepends time and date to each logged entry.

20131212 (Bug fix)
========

- Bug fix, thanks to Luis Lopes reporting a redraw glitch. Added another forced redraw event to get item highlights drawn in the override tab.

20131122 (Bug fix)
========

- Bug fix

20131109 (Bug fix)
========

- Fixed Relativity dependency code.

20131031 (LWtoA update. Native functionality build went to public beta Nov-2.)
========

- LWtoA support upgraded to 0.4.3.
 - 0.4.1 removed.

20131029 (Kray base R&D to complete featureset.)
========

- LWtoA needed some special quirking : unless we perform a useless copy to/from ::tempArray at each step of building the settings array, it gets thumped by the last action on it. LScript oddness.
- Interesting quirk that had unexpected ramifications. parse() handles sequential separators as a single separator. I previously through this was only for spaces, but we got odd errors with the previously ~stable Kray code. Triage highlighted that storing blanks (i.e. |||| results in that field going MIA when parse() looks at it).
 - We need mitigating code to handle deliberately blank fields (e.g. "" or nil) otherwise our settings array goes out of whack. It's a little ugly.
  - We store "__PPRN__BLANK__ENTRY__" for blank entries and then map between that and "" for the scene generation and UI code.
 - Possible to have other areas where we will die with this. Needs more digging.
- Radiosity setting bugfix (p0043).
 - Backported to 1.0.8.
- Implemented the following in Kray.
 - Cam object
 - DOF object
 - Cam UV
- Implemented helpers to extract VMaps and items by type in the utility library.
 - Will use this to refine the physical sky light plugin handlingq
 - Can also utilize for the camera lists in the scene overrides, for the active camera.

20131024 (QA, bug fixes, general enhancements)
========

- Bumped RPE version to 1.1 following recent changes.
 - We do try to map 1.0 files, but there may be issues.
- Kray PS lighting needed revisiting.
 - Caused a failure if no light in pass. Now fixed.
 - Didn't seem to handle the case where no lights are to be ignored.
  - First attempt at a fix. Looks sound.
- Arnold QA exposed issues in the path manipulation for a path of "". Fixed by adding guarding to the various functions for re-slashing paths in the utility library.
- Now extract Kray plugin script location from config files to write script location.
- Build option to disable inclusion of images in Kray headers since we're adapting their code. Leaving the images in place is potentially misleading.
- Restored call to stripPassEditor() at the end of scene generation. This was lost at some point in the distant past.
- Added generic logging/message box function. Simplifies debug, etc.
 - Migrated all info(), error() and warn() callers. Dropped a bunch of disabled/useless such calls as well.
- Scene Master overrides other than native were not assignable. (p0042)
 - Turns out to be a slightly different issue than reported. Timing quirk. Revised req_update calls in overrides listbox callback to see if they can mitigate the problem.
- Reviewed these systems to check if they generate artifacts or crash for missing dependencies. No issues seen :
 - Pixie dust
 - Instancer
 - HDInstance

20131022 (QA, docs.)
========

- Moved HV3 handling into a dedicated function, based on the FiberFX work.
 - Will drop settings for items not in the pass.
- Added a volumetric plugin line retrieval helper.
- Tweaked fixPathForWin32() to use quotation helpers.
- Comring work.
 - Was pretty broken before for loading; should be better now. No-one complained, so not backporting to stable.
- Added preference option to toggle error for dependency checking. Set to on by default.
- Relativity dependency handling overhauled to be more capable and QA passed.
- Fixed major issue in getPartialLine() code.
- Docs update.

20131017
========

- Fixed p0041. Thanks very much to David Blemur for the extremely useful bug report.
 - Backported to 1.0.7.

20131016 (QA ongoing)
========

- Completed light hook-up for Kray physical sky
- FiberFX QA complete. Phew.

20131015 (QA ongoing)
========

- Reworking aspects of the scene generation code to make it more robust. Probably need to rethink the whole approach at some point to make it more robust (related to a difficult to resolve bug in scene generation where the input line from the source LWS wasn't being retrieved correctly and was breaking the output scene).
- Misc bug fixes and optimizations of varying impact.
- FFx QA:
 - New handling of items in pass required change in call path to the handler function. It is now called no-matter-what.
 - FFx handler updated since FFx bumped to version 4. We can't support v3 for per-item adjustment and version 4 is what comes with 11.6; running prior scenes through PPRN under 11.6 still won't enable per-item handling unless the scenes are re-saved to get the per-item IDs.
 - Also handle cases where FiberFilter is not the first pixel filter.
 - Utilize new pixel filter line locator in utility to find the FFx line. We don't anticipate or handle multiple instances in the scene file.
 - Significant optimizations and robustness checks.
- Bug fix to writeHeader() following variable system rework.
- Dependency checking QA related bug fixes.

20131010 (QA start-up; QuickLWF Kray plugin added - rest will be added ASAP)
========

- Introduce settingIndex handling for the Kray plugin codepath when moving from each plugin retrieval function.
- Tweak to Kray plugin scene generation approach - more efficient.
- Kray tonemap plugin initial code added.
- Issue with scene reload fixed. (p0040)
 - QA suite extended to test number of passes > overrides in case of regression in future. Cause was pass index being used to iterate override array. If you had more passes than overrides, you'd overflow the array and get an error. Oops.
 - Backported fix to 1.0.6 (no-one reported this, though!)
- Experimental fix for pass store/retrieval during scene generation.
- Light matching function added to Kray physical sky for the ignore feature. (start on addressing p0038)
 - Not fully wired up yet. Based on camera indexing code used elsewhere.
- Bug fixing from labelled variable work now that #2716 is available for QA.
- Aligned function naming in Kray PS to address inconsistency.
- Initial code for the QuickLWF Kray plugin.
- Dependency checking for Relativity
 - Enhanced code for Relativity keyword searching with a more efficient and readable sequence.
  - Brought improved handling of clone references in the Relativity parsing.
- Utilized doubleSlashPath to simplify the escaped filter path creation.
- Eliminated 'CG' from path construction : user feedback indicated it was not desired.

20131006 (experimental dependency checking code: still writing - not enabled in any build)
========

- Adding post-scene generation dependency check to warn user of broken references in current pass. We can't do this earlier, sadly, due to the absence of any meaningful way to query Layout for scene dependencies.
 - We don't resolve the situation - there's no one-size-fits-all option here : nulls can still have a render contribution (e.g. HV blobs) or may lead to crashes. We also don't error this situation, just notify. Not all broken dependencies may be fatal or undesirable. This also limits impact of false positives until we gain confidence that the detection is sound.
- Tweaked some function names for consistency.

20131005 (Arnold support, Kray support, global variable referencing re-work, FFx enhancement : lots of churn, expect bugs. No override setting change.)
========

- LW 11.6 compound node in scene file - not yet checked, but code review indicates that all should be well.
- Extended FFx section to drop FFx blocks for unmatched IDs in pass. Requires LW #2715 or later. (Closes p0039)
- Reorganising some functions to drop fixed references to global variables given the new :: keyword guaranteeing availability.
- Shifted all UI ctl and variable references to label by implementation (e.g. prefix kray25_ to the Kray references). Avoids any collisions.
 - Main Kray migrated.
 - Physical sky migrated.
 - Arnold migrated.
 ! Compile tested; expecting bugs.
- PPRN is now dependent on LW build 2716 or later due to the use of the '::' global variable prefix. This resolves some quirks in variable handling that were exposed by the Kray implementation (p0037).
 - Resolves the Kray plugins issues and will enable these to be fully implemented once the variable naming migration has been completed. This is a long job, though, and not easily automated.
 - Build 2715 also fixed a bug requiring some workarounds for the helper functions before now (these have been removed in this build of PPRN).
 - Significant code churn from this change due to the potential for leaving unprefixed variables. Will need careful testing.
  - Will need to adjust arguments passed to all functions to drop global var references since we're now really global :)
 - Build check updated to prevent operation below #2716 for this feature.
 - Trawl of variables enabled some to be removed that were no longer being utilised.

20131001 (Arnold support)
========

- Utilized helper functions for string handling in Arnold code.

20130925 (Arnold support, Kray_PS UI fix)
========

- Working on helper functions to apply/remove quotes on strings and to convert to/from escaped backslashes.
- Huge thanks to James Willmott for the nudge regarding mouse callbacks - the Kray physical sky panel is now tracking mouse events properly.
- Misc bug fixes from initial QA runs.
- GUI now completed.
 - Some linger quirks that are being dealt with - double slashes and quotation are required for the scene file, but not for the override definition. However, the UI requires double slashes (it seems) to avoid issues for backslashes, etc.
- Added better handling in scene generation codepath for cases where the build doesn't support the scene master-override defined renderer choice.
- Preprocessor limitations required a change in approach for the renderer[] set-up. Adjusted the guidance.
 - We now show all options in the drop-down, even if the renderer support is not included in the build. We indicate it is not available by adjusting the text (see the globals include) and we also show a message box if the user chooses any disabled renderer as well (see scnmasterOverride_UI()). It's not as graceful as I'd have liked, but it will have to do.
- Fundamental plumbing completed.
 - Bodging the volumetric section right now... Not sure how to handle since it's nodal...
  - Write the standard section if no Arnold renderer section in source file. Otherwise, we just copy it from the source file for now.

20130918 (Arnold support)
========

- Tweaked scnmasterOverride_UI() codepath to work reliably within the extended renderer implementations.
- Culled alpha strings. This may take a while.
- Arnold support started. The Kray plugin work is stalled until LW3DG provide guidance.
 - Based on Kray 2.5 code which has been well-tested.
 - Imported variables into global Arnold list.

20130909 alpha 9 (Initial work on Kray plugin support; Kray overrides massively changed)
================

> Work to understand/mitigate settings array issues.
 - Fixed unencapsulated debug related Physical Sky info() statement; can now disable Physical Sky and get a clean build with core Kray functionality only.
 - Also made the Kray plugin system truly modular and further wrapped everything up in a sanity Kray check to ensure you need Kray to get plugins and plugins to get physical sky, etc.

20130905 alpha 8 (Initial work on Kray plugin support; Kray overrides massively changed)
================

- Kray physical sky continues and, except for some niggles, is close to completion.
 > Getting some vanishing array issues that require mitigation (p0038).
 - Resolved issues with setting retrieval, etc. Sun and Sky checkboxes are now functional in connection with this fix.
 - Still having callback issues w/ crosshair drawing. Will address other problems and come back to this.
  - Reverted workarounds to try and expose the issue in the meantime.
 - Reworked storage method to directly load array rather than using indirect methods.
 > Light ignore is not remembered due to ID expectation...not sure how to handle. Might need something like the active camera handling to deal with this (p0037).
 - Improved comments in main Kray support code to better explain what's happening wrt plugins.
 - Renamed default setting variables to clearly break from working variables. Should help to trap some suspected bugs.
 - Changed scene gen code to populate variables from array.
  - Initial pass, untested right now.
 - UI overflow fixed.

20130826 alpha 7 (Initial work on Kray plugin support; Kray overrides massively changed)
================

- Kray implementation now strips 3rd party renderer entry if it exists for a renderer other than Kray when the scene is generated for rendering.
- Fixed positioning of redirect buffer export checkbox in Kray panel.
- Finally got Physical Sky dialog to come up.
 - Some lingering issues with checkboxes.
  - skyON and sunON controls are currently disabled.
 - Some controls overlap.
 - Crosshair callback not working as expected....get drawerase related error.
- Reworking the Kray plugins approach to try and maintain plugin-specific array blocks that are then appended to the main Kray settings block. We will no longer have dynamic setting presence for Kray plugins as a result.
- Numerous bug fixes to a6 code.

20130821 alpha 6 (Initial work on Kray plugin support; Kray overrides should be fine despite this)
================

- Starting to consider how to handle Kray plugins (e.g. physical sky)
 - Can handle dynamic settings blocks within main override for Kray for Kray plugin configuration variations.
  - Use a header to mark blocks for plugins. No terminating marker in the current approach, but parameters are static.
   - Definition by type flag concatenated with text to reduce collision risk.
  - Once a plugin has been activated in a Kray SMO, no mechanism to remove those settings - can disable, but not delete (via the UI).
 - Main Kray code extended to handle arbitrary extended settings array for plugin settings via scnGen_kray25_appendPlugins(). Settings are appended to the main Kray settings block, untouched.
 - Each plugin is a separate master plugin, so we can use our existing Kray 2.5 master code for handling these.
 - Starting with the big one : physical sky. This is a good target for initial implementation.
  - UI code wired up
  - Override infrastructure in place.
  - UI hookup needed. Can retrieve from original Kray panel code.
  - Call from main to plugin saver code is implemented.
  - Hooked into the build via Kray master file.
  - find_image() replaced with approach used elsewhere in PPRN to locate images.
 - These plugins will be tied to the specific Kray override against which they are applied.
- Minor code cleanups (removed a couple of debug info() calls and some commented-out code)
- Pass the settings array and associated items for the pass to render engine functions now.

Alpha 5 has ~mature Kray support. Plugins are next.

20130508 alpha 5 (No changes in existing features; working on the Kray 2.5 support for version 1.5)
================

- Added a warning system when Layout is being used in Discovery Mode. Since scene savers are disabled in that configuration, PassPort operation is heavily compromised. The implementation is a warning (for now) and only shows up once in the session.
- Thanks to a bug report from 3dworks (Markus), an issue with the SavePassAsScene() function was fixed.
 - Due to aggressive garbage collection in LScript, the reference to the UI control value was invalidated before we retrieved the value. This was avoided by grabbing the value before doing anything else in reqpost{}. This has also been backported to 1.0.5.

20130425 alpha 4 (No changes in existing features; working on the Kray 2.5 support for version 1.5)
================

- Set 'send to LightWave' to on by default in Kray presets. That should ensure that images are output. Follow Kray's lead on the save handling otherwise.
- Minor clean-up of redundant code.
 - Will need to remove code that has been disabled for QA of the new getRendererPluginLine() function. Left in in case there's a need to revert. Next build will remove the disabled code.
- Implemented use of the new getRendererPluginLine() function to simplify renderer handling in Kray and the native system (also used in the stripping function).
> Pondering light type and shadow type overrides.
> Should Kray mismatch yield a warning or an error? Right now, we trap this with an error to avoid problems.

20130423 alpha 3 (No changes in existing features; working on the Kray 2.5 support for version 1.5)
================

- 3rd party renderer stripping code was not functional.
 - Typo in the stripping function for 3rd party renderer.
 - Partial line search string was not complete, so failed.
 - Added a utility function to extract the line for a given master plugin. Simplifies handling.
 - Fix to address zero-length scene creation.
- Kray scene code tweaked slightly to avoid clobbering of the reference scene file in later functions.

20130408 alpha 2 (No changes in existing features; working on the Kray 2.5 support for version 1.5)
================

- Tweaked color variable handling in Kray UI to address bug. Odd one, this. The array handling in LScript is a little peculiar in LScript.
- Bug fix for missed important variable.
- Misc scene generation bug fixes.
- Buffer re-direction implemented.
- Bug fix for version retrieval.
- Enable Kray when it hasn't been applied before.
 - Major adjustments to the code pipeline were needed.
- Kray implementation deliberately fails if no camera is assigned to the pass.
- Bugs fixed in camera name retrieval code in Kray code.
- Tweaked code in Kray to refine behavior where Kray has not been applied outside PPRN.
- Enabled Kray rendering call in the render frame/scene function.
- Editing Kray override throws an error - array is overflowed.
 - Bug in color handling.
 - Also found a missed iteration of the index for look-up.
- Now handle render engine toggle:
 - Generic external renderer strip function added.
 - Kray renderer addition function added. Uses the external renderer strip in case there's a different 3rd party renderer configured.
  - Kray renderer chunk appended to scene file.

20130401 alpha 1 (No changes in existing features; working on the Kray 2.5 support for version 1.5)
================

Kray 2.5 work:
 - Fixed issue with 'edit override' following new renderer support.
 - Initial hook up of settingsArray code.
 - Re-implemented scene modification code; original approach wasn't ideal.
 - Re-matching Kray default layout, etc. and will then drop features/adjust as needed.
 - Tweaked Kray detection code to be more robust.
 - Misc fixes to code.
 - Fixed UI layout.
 - Split Kray 2.5 code up, just to keep source files manageable. The monolithic approach was yielding a 160 KB code file, which was unusable.
 - Imported script code and migrated implementation to use it. Kray uses the script chunk; we write both so that generated pass scene files can be utilised.
  - Tweaked internals to resolve a startup issue if Kray support disabled with partial support implemented as in this build.
 - Active camera code for UI lifted from native and hooked into the Kray system.
 - Initial UI code imported.
  - Have to rename functions and variables to avoid collisions.
  - Trimmed unsupported features (in terms of PPRN) - first pass.
 - Started code work on the Kray 2.5 support.

20130222 (No changes in overrides - just bug fixes for 1.0.4)
========

- Added extra separators for 'sensitive' image filter exporters.
 - Special case handling in the generatePath function based on the mode (filter_2sep)

20130207 (No changes in overrides - just bug fixes for 1.0.3)
========

- Fail operation on LW prior to 11.5 on the Mac platform. People don't read the documentation, it seems.

20130206 (No changes in overrides - just bug fixes for 1.0.2)
========

- Restore getsep() in path generation functions. It turns out that sometimes we lack this, and the user may also omit it. That then breaks things.

20130205 (No changes in overrides - just bug fixes for 1.0.1)
========

- Adjusted generatePath() to recognize a "filter" mode; we then have to check outputStr to determine whether we're in the equivalent of "frame" mode.
 - This change puts redirected image filter output into the same location as the SaveRGB imagery.
- Bug fix to generatePath() logic. Also avoids a double getsep() in some situations.
- Tweaked generatePath() to add a "_" before the base name. Generates cleaner filenames.
- Buffer redirect issue - seems to be coming from LScript Garbage Collection.
 - Revised approach to retrieving the redirection setting to avoid GC clean-up.
 - Extended the arguments to the handleBuffers function to address look-up failures due to the GC.
- Removed compile-time toggle for Pass Buffer Support - it shipped in 1.0.

20130130 (1.0 - change to enable active camera override)
========

- Flipped the y loops in Process() and Reprocess() to handle the reverse-order selection from Layout. Items now display in order rather than the bottom-top order evident up to now.
- Implemented an active camera override in the scene override. Very cool.
- Fixed camera override UI reverting resolution multiplier.
- Version string now 1.0.

20130125 (RC 1 - major changes in light override, scene master for final 1.0 feature delivery)
========

- Gradient backdrop toggle and color overrides added to scene master.
- Caustics toggle added to light override.
- Radiosity flag support added to the native renderer scene master override and scene master override UI.
- Tweaked override item display filter code to screen out items not assigned to the current pass.
- Hoped for FiberFX workflow not available. FiberFX won't permit breakouts for different elements - it fails if any of its settings reference an element not present in the scene file. Note added to documentation.
 - Planned to add passname to the FiberFX output name automatically. Given the workflow limitation, it may not make sense at this time.
- FiberFX function called when no scene override in existence. Fixed.
- Enabled new feature for testing. Passed all tests in QA.
- Various tweaks internally regarding reqpost() actions to reduce activity if the user does nothing at all.
- More code clean-up. Retiring doUpdate usage.

20130123 (beta 8 - no override changes since beta 7; major change in the experimental build)
========

(Garbage collector should clean up file handles, but this is a path to ensuring a clean implementation from which to base the Python port)

- p0034 also fixed.
- Fixed p0032 and p0033 in a beta 8 respin.
- Fixed bug in 'create pass from selection' code for cameras, where an incorrect reference to tempLightAgents[] was lurking.
- Optimization and unification of pass creation/editing dialog code into passHandler(). Need to use intermediary functions due to callback limitations. Reduced binary size by 7 KB and source by 10 KB.
- Tweaked MotionMixer code to avoid creating file handles when we might fall into an error condition immediately afterwards due to cloned MotionMixer items check. Move the file handle activity after that check.
- Revised RPE handling.
 - Store RPE file version (in case of changes). Mismatch or absence will cause Passport to fail the load and display a nice error message to the user.
 - Store Passport version (in case of changes). We'll try and load, but display a warning, just like the scene load. Same caveat as for scene save in this state applies. Note added to documentation.
 - Store LW version as well. We'll try and load, but display a warning, just like the scene load. Same caveat as for scene save in this state applies. Note added to documentation.
- Audited file handling code
 - Fixed file handle leaks in the render script functions (scriptOutput was left open).
 - Removed accidental duplicate file close calls in the MotionMixer function.
 - Error paths now have close() calls.
- Reorganising source in some places. No functional change other than additional inserts in the main file to pull in the new ones.
 - Broke apart interface subfuncs file to separate out pass and override interface functions. Neutral functions are retained in the original file.
 - Finished breaking out UDFs to separate, UI-feature-specific files. Reduces clutter.
- Scattered some req_update() calls around to try and improve repaint issues.
- Experimental code for user feature request (Javier Meroño). This is currently for post-1.0 (not compiled-in in the 1.0 betas) : Implement a passBuffers[pass] array to flag whether supported image filter exporters should be utilised for a pass. If no image filter is configured in the scene file, don't bother to (de)activate them. This is fairly disruptive and hence experimental. Depending on QA tests, it might be pulled into 1.0.
 - Initial functions added. Activated globally with internal flag that can be removed once stable.
 - Works with all supported image filter exporters handled by handleBuffers().
  - Works as a subsequent, and iterative, stage. Will handle multiple instances of the image filters and with any buffer redirection option.
 - Implemented across pass creation/duplication/editing/deletion.
 - Implemented in save/load passes files (rpe).
 - Auto-assigned with zero values for all options to Default pass.
 - Breaks compatibility with scene data blocks and rpe files when active.
 - Initial UI implementation for all actions.
- handleBuffers experimental handling of the compositing buffers export and also exrTrader. Users must set up the filters; we just redirect the image data.

20130121 (beta 7 - no override changes since beta 6)
========

- Internal tweaks to motion override code in scene generation, nothing user-relevant.
- Camera override no longer has trouble with .mot files.
- Added error handling for invalid filenames in overrides. Avoids an ugly error message from LScript that scares the user.
- Fixed p0031 - object override led to 0 KB scene file! Misfire in MotionMixer function. Also affected surface overrides.

20130120 (beta 6 - scene master changed since beta 5)
========

- p0030 fixed - Resolution multiplier wasn't sticking, for some odd reason.
- Thanks to Luis for the report leading to p0029. This one is very strange. For a small number of lights, there was no issue. For larger number of lights assigned to overrides, the changeScnLine() function encountered problems. The root cause isn't clear. The light override code has been altered to not use changeScnLine and to direct-write instead.
- Object motion start and end variables moved to global state.
- Buffer handling function tweaked to avoid possible file corruption.
- .bat files are now deleted after the render is complete. No need for diagnostic aids.
- AS toggle added to scene master override.
- To implement AS toggle, had to revise scene master override so removing some legacy stuff as well since we're breaking things anyway.

20130120 (beta 5 - no issue from beta 4)
========

- Numerous fixes to camera override:
 - Misc other fixes in camera override code.
 - IKInitialState[passItem] definition was missing for the camera override. Fixed.
 - Fixed some variables that weren't exposed (cameraSettingsPartOneCount, etc.) for offset handling.
 - Fixed a bug in the part two override creation in the camera override.
 - Fixed a bug where the camera override part four array was not exposed to the scene gen code.
 - Resolution multiplier override removed from scene master - it's better in the camera override.
 - Bug fixes in resolution multiplier handling.
 - Fixed a missing comment marker for the reference in the camera override code in the scene gen function.

20130119 (beta 4 - users will need to re-do scene master overrides, they were broken in b1-3.)
========

- All credit to Luis Lopes for the continuing reports leading to p0026, p0027, p0028
- Fixed p0027. Was missing cast to integer() in each case.
- Fixed scene master UI wiring bug that triggered p0028.
- Fixed p0026.
- Removed debug info() from the utility code.
- Tweaking Scene Master interface to tidy it up before new content arrives.
- Removed DEBUG button from UI for beta builds. No longer needed.
- Beta 3 shipped with experimental Kray code enabled. This build doesn't - it's not ready for beta at all yet.

20130119 (beta 3 - safe to ignore settings warnings from beta 1 and beta 2)
========

- Autoscan configuration is now supported (p0025). The original code assumed that configuration files were an either/or thing. You'd either have the regular EXT file or the Extension Cache. That's not true, though. You can have both. To that end, we now parse both or either as we find them. That may lead to some side-effects, but there's no other mechanism available. Note added to the documentation.

20130119 (beta 2 - safe to ignore settings warnings from beta 1)
========

- Fixed an obscure issue in the conditionals to the render function. Will need to revisit this because the failure makes little sense. (p0024)
- Fix to internals in the case that the output folder is invalid. We now throw up an error and ask the user to fix the output path selected. (p0023)
- Thanks to Luis Lopes: found and fixed an issue (p0021) with 11.0 scenes where writeHeader failed to find its endLine. Added fix and countermeasures.
- Fix to insert SaveRGB and filename format lines. Will need to add a preference for the output format. p0022, found in working on p0021
- Fix to lwsn path on Windows.

20130118 (beta 1)
========

- Fixed a null variable issue with the light setting offset. Was not defined if there were no assignments, leading to breakage.
- Fixed some issues with the scene master panel when editing an existing override.
- Fixed some variable names to be clearer.
- Fixed loading of LW version string from data block.

20130117
========

- Added backdrop color support to native scene override.
- Made render instances conditional on hostVersion() check.
- Added background support to native scene override.
- Added fog support (mode, color) to native scene override.
- Fixed scene master override FiberFX settings array index error.
- Enabled camera filtering and display in override listbox for compatible overrides (motion and camera).
- Camera override code added to scene gen section.
- Camera override UI added.
- Show warnings if mismatch in either situation, to warn user about unexpected issues.
- Plugin version string now written out to PassPort data block.
- LW version now written to PassPort data block.

20130116
========

- p0016 *finally* fixed. This revealed a lot of faulty assumptions in the original code that needed to be adjusted, as well as various issues in the reworked scene gen system. It's a great relief to have this fixed, but it made the whole system far more robust in the process.
- Fixed caustics line handling in the scene gen code.
- Removed \n from the volumetric and lens flare settings that are written out - we only replace lines, not add them in these situations. We use a different mechanism to make the changes, so \n adds needless carriage returns.
- Fix to use 'IKInitialState' instead of 'objPathAlignReliableDistLine' to track end of the standard initial chunk of settings for each block.
- Minor fix to final stage scene gen code.

20130115
========

- Restored missing definition of hvStartLine.
- Working on the final state of the scene generator code, to better handle the HV stuff and to avoid losing lines in the process.
- p0016 was pretty stubborn, but should be close to resolution.

20130114
========

- Adjusted code to derive number of channels - now uses parse() to split the line and directly retrieve the number of channels.
- Generic header function added to future-proof header handling.
- Reworked the approach from the original plugin to stripping the PassEditor reference.
 - No longer breaks line number references, so look-ups of the line numbers are correct.
 - Color correction settings and related lines are no longer dropped from the scene. We only strip the PassEditor lines, nothing more, nothing less.
- Utility functions file added and code moved in to reduce clutter elsewhere.
- Removed platformVar - replaced with platform()
- Simplifying main scene generation function:
 - Created new function to generate new scene path.
 - Created new functions to hold code to write object, light and camera data.
 - Created new function to generate SaveRGB path.
- Moved radiosity insertion code to early in the scene generation code to avoid line reference breakage.
- Optimised some aspects of the scene generation code.

20130112
========

- Stupid error in handleBuffers file handling resolved, fixing bug p0019.

20130111
========

- Plan to fork code for release vs ongoing development.
- Will work to fix open issues before continuing with camera override implementation (UI and sceneGen case8).
 - p0020 fixed. Stupid error in filenames being passed to function to change the scene lines.
- HTML documentation to replace the original PDF files.	
- Moved large comment block in main file out to notes.txt to reduce clutter.
- Original code had hard-coded the number of channels. Now we retrieve this information directly from the scene file (cameras only have six channels (3*trans, 3*rot), for example - objects and lights have 9 (3*trans, 3*rot, 3*scale))
- Added another utility function readSpecificLine(line,file) to retrieve the requested line. Get nil back if the line requested is beyond the end of the file.
- More implementation work for camera override.
- Tweaked progress readout code - now uses a defined number of stages to handle offsets. Added to camera chunk of code.
- Removed harmless, but misplaced case 8 handler in object section of scene gen code. Copy/paste error.
- Basic QA following heavy disruption yesterday. Nothing seems to be broken beyond the existing open issues.
- Eliminating additional hard-coding of genus types in various places. Replacing with the SDK values (MESH, LIGHT, CAMERA)

20130110
========

- Initial work on camera override implementation (type8).
 - Highly experimental, minimal implementation.
 - Cameras have to be assigned to passes, like other entities.
- Scene parser code looks peculiar - reviewing.
 - Need to investigate to see if it's still ~correct.
 - It seemed to leave files hanging open, which is odd. Revised code to ensure input files are closed. Can revert if something breaks.
 - Added functions for the camera handling.
 - Adjusted end line function operation to be more generic. May need more careful thought - haven't investigated third party light/camera handling yet. Anticipating that this change might need to be reverted.
- Refined UI code for the renderer selection dialog for the scene master override (creation).
- p0016 still lurking.
- p0019 created
- p0020 created.

20130108
========

- Trying to put a renderer-choice dialog into createSceneMasterOverride(). Might be borked, so can back this out as needed.
- Adjusted editSelectedOverride to pick up renderer setting from override settings.
- Added docs folder containing converted PDFs as .doc files. Will need to update these nearer release.
- Added misc folder to hold PSD and font stuff that is only useful for developers.
- Prototype work to support other renderers. Making this modular. Highly experimental and hardly any code exists right now except for the native renderer.
 - Major change to refactor code and introduce early value into settings array for the type6 override to track renderer in use.
 - Will need a partial line read to ensure that Kray is applied before manipulating. Should warn the user if the data is not found.
- Minor refactoring of sceneGen code to clarify array indexer usage.
- More work on the light override issue (p0016).

20130107
========

- Misc bug fixes.
- tempDirectory now a global since it's used so much.
- Light override was partially busted (p0016, p0018).
 - Reworked to reliably change/handle lens flare and volumetric properties.

20130106
========

- Updated graphics to match 'Renewed' differentiation.
- Removed 'Affect OpenGL' light override setting - it has no bearing on the render.
- Implemented FiberFX pass generation and overrides in Scene Master.
 - Added safety check in scene generation code to query whether we're altering version 3 data.
 - Changes are very specific in nature due to the unfortunately generic parameter names being used in this plugin's data.
- Reworked scene generation code due to inconsistent GI parameter presence in LWS files. Extended the preparation code to review whether certain inconsistent settings are present. If they aren't, we insert them into the scene file in the correct location with the corresponding value to avoid changing behaviour. We then set the value accordingly later in the generation code.

20130104
========

- Found the render code wouldn't work at frame 0. The system would think it saved frame 1, but actually frame 0 should have been saved.
 - Implemented int() cast to force the frame to the integer value returned by the system.
- Fixed some odd scene generation bug, but not exactly sure how. Oh well.

20130103
========

- Moved generateSurfaceObjects() to the sceneGen file from the interface_subfuncs file.
- p0017: On Win32, was able to get correct line in error message for 'surface override' bug p0017. Seems that line 1744 in the sceneGen generatePath code reports an invalid value of pass :
 	genPath = genPath + outputStr + "_" + fileOutputPrefix + "_" + userOutputString + "_" + passNames[pass] + baseName;
 - Also triggered when .lwo needs to be written out for surface override, or similar. Origin is the call to generateSurfaceObjects() which expects to evaluate passNames[pass]. Since 'pass' is a local variable, it fails.
 - Fixed by making 'pass' a global variable. Not particularly elegant.

20130102
========

- Introduced new 'PassPort Renewed' naming to distinguish this effective fork/rewrite from the original project.
- Growl system interoperation on Mac now configurable.
 - Wrapped up growl code in OS X scene render functions with a preference setting to enable growl (or not).
- Experimental fix to oversight in scene generation code. Line 1468. Might need a better fix.
- Retired LW preference handling code for older LW versions from getImageFormats() as we've locked out versions prior to 11.0
- Removed resizePanel() empty function.
- Error message change in getCommand function.
- Minor optimisation in getCommand function.

20130101
========

- Make use of runningUnder() to avoid lwsn crashes.
- Tweaked hard-coded, obsolete, reference to ScreamerNet.
- First run under OS X!
- Bumped minimum requirement to LW 11.0.
- Further tweaks to refine operation.
- Moved Motion Mixer handling to a separate function to reduce complexity.
- Moved buffer handling code to a separate function to reduce complexity.
- Modified writeOverrideString function to handle 'special' case of FrameSize and GlobalFrameSize settings.
- Deployed improved scene file writing code. Probably broken build for now. Will debug over time :)
- NT helped with guidance to avoid the arithmetic error on OS X. It's that this_script[1] in the main file (and also in the interface subfuncs file).
 - Reworked this code per NT's guidance.
 - Have followed up the reply with a query about why the error location is always wrong.

20121229
========

- Removed HackyUpdates and related code.
- Scene Master Override extended to support GI adjustment :
 - Toggle radiosity
 - Change mode :
		mode		type value
		backdrop	0
		monte		1
		final		2
 - Toggle interpolation.
 - Toggle blur.
 - Transparency
 - Volumetric radiosity
 - Directional rays
 - Gradients
 - Behind Test
 - Use Bumps (uses RadiosityFlags, and uses binary which is written out as decimal. LScript doesn't appear to permit conversion).
 - Numeric values for GI. Angular tolerance is currently broken due to some odd conversion behavior in LW.
 - Caustics.
- Scene Master override interface overhauled.
- Scene Master override support added for :
 - Ray precision
 - Ray Cutoff
 - Shading samples
 - Light samples
 - Global light intensity
 - Global flare intensity
- Scene Master Override extended to add toggles for :
 - Lens Flares
 - Shadow Maps
 - Volumetric Lights
 - Two-sided area lights
 - Render instances
 - Scene Master Override extended to support overriding raytrace flags :
 - sum of (ctlstate * flag value) for each of:	
		raytrace	flag value
		shad		1
		refl		2
		refr		4
		tran		8
		occl		16
- Tuned scene generation code to work more flexibly and in a more robust manner.
 - Previous approach, from original code, was to use hard-coded lengths from the strings being sought and had multiple occurrences of the string.
 - Previous approach also didn't seem to handle variant settings (those that disappear when unset and reappear when set, in the scene file).
 - New approach appends these settings to the end of the scene file.

20121228c
=========

- Removed some binary character corruption from the scenegen file.
- Bumped recursion maximum value to 64, to match LW 11.x.

20121228b
=========

- Shifting override panel UIs out to a dedicated file, with edit/new modes merged.
 - Major optimization of the UI code and simplication.
 - Moved edit and new value assignments to controls nearer to the controls in the code.
- Fixed Win 64 platform handling.

20121228
========

- Thinking about how to more intelligently implement the UI update for bullets :
    overrideNames[x] = " " + icon[BULLET] + " " + overrideNames[x];
- Returning to implementation of new stuff : 
 - Fixes for the new additions to the light override. Fixed volumetric toggle. Lens flare toggle still not working as expected...

20121224
========

- Removed some obsolete info() calls
- Added limitation entry regarding current usage expectation that doesn't involve LScript/RT.
- Identified additional failure mode - if user output path is invalid / inaccessible.

20121220
=========

- Preprocessor full of flaky, so went for a different approach to track supported platforms.
- Dropped absolute paths for the @insert statements, gone for all-relative. Seems to no longer blow up.
- Removed various info() statements.

20121214b
=========

- First pass at system to failsafe operation on unsupported (e.g. CFM Mac) LW. Need to also add build check in this to block running when the hacky modes are stripped out.
 - Needs QA.
- HackySaving removed (was required for versions prior to 9.3 - very old now).
 - Build check added to entry points; script will error() out on builds prior to 1281.
 - Significant code reduction. Needs limited QA.

20121214
========

- Adjusted o_AddAll code to work with new system.
- Fixed numerous silly errors - current favourite : .asStr instead of .asStr()
- Fixed stupid item ID look-up bug in override event code. This was the cause of p0013, and it was a very silly error. *hangs head in shame*.

20121212
========

- Updated header images to credit Matt for his work.
- Found various gaps in platform support for Win64. Closed.
- Still fighting p0013....
 - Very odd. The arrays seem to be intact and valid. There's something odd going on in the look-up. A multiple selection, even with a gap between, always returns sequential numbers (1 2) rather than (3 5). Puzzling. Values coming into the parse function are correct.
- Replaced hard-coded platform IDs with official variable names.
- Deuce reported that the compiled version doesn't have the start-up issues of the uncompiled version (p0014), on both Windows and Mac. Odd. (NT : known issue with images loading into uncompiled LScripts - nothing to do except compile the script)

20121211b
=========

- Considering bumping host version requirement to allow hacky saving to be removed, for simplicity.
- Flagged HackyUpdates with FIXME and ensured it activates on Mac64 for review. Might not be needed any more.
- Need to resolve p0013 and then attack the pending items list before new work undertaken.

20121211
========

- Adjusted o_itemslb_event to work with the new array configurations.
- Adjusting o_parseListItems to work with the new filtered ID list. Also adjusted input variable name (changed passItemsString to overrideItemsString).
- Highlighting code now appears to be working! It needed a pair of req_update calls. Added comments to code.
 - Lurking bug p0013 : if you select the second light of two, the first is highlighted. Gah.
- Next step is o_AddAll re-implementation.
- Moved override item filtering code into o_Filter(overrides_list) for generic use.
- Removing comment markers from code disabled during UI dissection. Should resolve some lingering repaint issues. May need to add o_displayNamesFiltered clearance to some functions in the UDF file.

20121210
========

Continuing work, now to handle the overrides list assignment and retrival stuff. Check the override operation observations section below for how this worked in the original code. This should help to understand this change.

- Bug fix to correctly populate items list - silly bug due to indexed arrays in LScript starting from 1.
- Removed various info() calls.
- Removed obsolete code.
- Implemented o_displayIDs to build an override-item-list-aligned ID array.
	- Filter this into o_displayIDsFiltered in the same way that we handle o_displayGenus, o_displayNames.

20121207
========

Work continues on the UI systems :

- Migrated requpdate() calls to req_update().
- Various fixes and implementation tweaks to filter override items. Some remaining bugs to be ironed out.
- Disabling direct calls to set the override item list to nil or set_o_items. The associated array ought to deal with this.
- More code clean-up to simplify overrides list handling in case of multi-selection, etc.

20121206
========

Brace yourself. Here's the big set of UI changes related to filtering the override items listbox based on selected override type, and to making the code less aggravating to read. Many thanks to both Lernie and Matt for their help in showing me where I was going wrong in the original attempt to implement the listbox filtering based on a selection elsewhere in the UI. I wasn't far off, but overlooked the multi-selection aware nature of the listboxes and a couple of other issues.

- Changed the obscure c3 listbox references to 'gad_SceneItems_forPasses_Listview'
- Changed the obscure c3_5 listbox references to 'gad_SceneItems_forOverrides_Listview'
- Changed all other obscure UI references to explicit labels; more readable/understandable than 'c0_5'
- Removing lots of tempNumber usage that confuses intent of code.
- Added debug state button to UI. Intent is to enable developer to block rendering and to have scene files open for inspection during development of new support in PP. Only shown in dev mode.
 - Render functions now respect this setting.
 - Setting retained across sessions. Default is off.
- Switched dev and debug handling to integers to make handling easier. 0 is off, 1 is on.
- Split Passes and Overrides UDFs out of main file to two separate ones.
- Reworked the override item list generation code - much simpler.
- Fixed bug p0012 - hadn't yet hooked up the override lists in the reprocess UI code.
- Initial migration of override items listbox code to new filtered list. This will be bringing breakage aplenty.... There's some additional subtlety in tracking selected items, it seems.
- Scene Master special item gets an internal genus type of 0 to filter against the type6 override.

20121204
========

- Moved button functions out of Interface code file into UDF file. Makes more sense.

20121203
========

- Added info() calls to try and understand why genus checks are failing, allowing incompatible types to be assigned to overrides.
 - Found that code only uses genus to know how to reference the itemname in terms of an agent. There is no check for compatibility with the selected override.
- Rewrote interface code to check override type and genus, rejecting incompatible assignment attempts.
 - Works just fine.
 > Fix to be rolled into other functions in the system. FIXME added to o_addAll - this will need to be re-worked in the same kind of way.
- AddSel button tries to add selected Layout item, not the elements in the righthand listbox. Documented, but odd, possibly not expected, behaviour that caused p0010. Opened p0011 for more explicit tracking of issue and whether this needs to be re-worked.
- Added platform '11' corresponding to Mac64 platform to various platform checks in the code.
- Added dev flag in the render code to block rendering and instead permit inspection of the generated scene file and batch file combination.
- Re-jigged some changes related to override item assignment filtering, to make them more understandable.
- Minor typo fixes.

20121201
========

- Unpicked work related to false start to address issue p0009. Better fix needed.
- Added platform ID of 11 to correspond to Mac64.
- Listbox selections are misbehaving… p0010

20121130
========

- Fixed obscure startup bug p0003 in the code.
- Running QA tests on pass generation and functionality from yesterdays sweeping changes....
 - Bug p0004 fixed in argument order for new SceneGen code. Now works properly.
 - Bug p0005 fixed : had overlooked a legacy path construction chunk of code that missed a getsep() call originally and hadn't been migrated to the new generic construction func.
 - LWO saver code was broken in original script (p0006). Moved to the generatePath function. Potential for simplification exploited as well - duplicate code in save path eliminated with a single instance. Saver construct was also easily matched to generic form in function.
 - Validating object property overrides : visible to camera; visible to rays
 - Validated surface override
 - Validated alternative object override
 - Validated light exclusion override
 - Validating master scene override :
  - Bug p0007 identified - master scene override will fail if anything other than the (Scene Master) is added :
	- Initial fix is to empty the assignmentArray for this override - it should be nil to avoid issues. Had to also add some safety checks for nil for size(assignmentArray) later in code due to this.
- Bug p0008 identified and preliminary triage added - if the overrideType is (nil), size() will choke badly in the 'failsafe' conditional in sceneGen. Trying to avoid this and more cleanly handle the situation.
- Bug p0009 related to the above - it seems to be possible to add elements to overrides that are incompatible with that override (e.g. surfacing overrides to lights)
 - Fix will be to screen right hand column contents to avoid listing incompatible types for overrides. UDF code needs serious work to address this (also for add all, etc. buttons).
- 30 KB less code right now compared to original source.

20121129
========

- Trying to re-enable disabled lens flare and volumetric properties support for lights. Untested.
- Major optimisation of the SceneGen code :
	- Started by splitting code and looking for differences between frame and sequence mode. Based on differences, added a 'mode' switch ("frame" or "seq"). This then drives the output string formatting and naming. This allowed the majority of the simplification.
	- Added a new internal function called generatePath that takes inputs common to all of the SaverPath generation steps. This reduces duplication in the save code to function calls with similar parameters. The save function utilises mode to determine how to construct the final path.
	- Reduced code by 20 KB. Redundant saverPath code will be removed once experimental changes for generic path construction have been validated.
- Pushing UI layout variables into new passEditor_UIglobals.ls file, to be able to easily share layout settings between edit and create override dialogs, for example. All dialogs migrated and tested. Moved 7 KB of variable definitions out of the Interface_Subfuncs file. Some code increase due to the revised dialog in the editing section, but at least it is all now consistent. Will consider a further optimisation in a future revision.
- Minor coding style fixes (bug p0002).

20121128
========

- Removed unused build variable. Switched version to a date build (experimental)
- Added a dev toggle switch to handle @insert switching for source vs compiled.
- Adjusting about screen to remove registration readout and to add LW version and platform information.
- Removed dongle check code that was obsolete.
- Removed Mac CFM code chunk - CFM was never supported, based on the code comments.
- Optimised the @insert statements to make the code more readable and maintainable.
- Discovered that @insert doesn't work with icon resources - you have to include them in the main script.
- Moved variables out of code into a separate file to reduce clutter and needless duplication.
- Removed dead code that was disabled by previous contributors for better alternatives.
- Fixed indenting in original code.
- Moved UDF code to a dedicated file.
- Worked around About box corruption (bug p0001) by disabling drawline calls in the req_redraw function. Added an explicit line drawing call in the about box function instead.

+++++++++++++++
+ In Progress +
+++++++++++++++

- Prototype w/ Arnold support.
- Kray plugin support.

********
* Bugs *
********

p0001 : About screen corruption (Fixed)
p0002 : Coding style issues (Review ongoing, largely fixed)
p0003 : Start-up bug. (Fixed)
p0004 : SceneGen routine blows up. (Fixed)
p0005 : path incorrect. (Fixed)
p0006 : LWO saver blowing up. (Fixed)
p0007 : Master scene override failure if anything other than, or in addition to, (Scene Master) is assigned to it. (Fixed)
p0008 : Failsafe code for overrideType needs to be made more robust. (Fixed)
p0009 : Possible to add (Scene Master) item to overrides that are not related. Need to engineer a fix (skip first item in list, or create a genus for this item). (Fixed)
p0010 : listbox selections are misfiring. (notabug? related to p0011 - user expectation was different to UI functionality)
p0011 : AddSel seems to replace existing assignments of overrides, rather than adding to the existing selection. Odd and probably the cause for report p0010. (deferred)
p0012 : Rebuilding lists causes script to explode. (Fixed)
p0013 : Selecting second item in list causes highlight to be drawn (on repaint) for 1st item. (Fixed)
p0014 : Uncompiled version crashes out on Mac and fails to start-up roughly 70% of the time on WinXP. (closed, LScript bug)
p0015 : Overrides with assigned items don't get bullet point until the lists are updated, or some major redraw occurs (also in original code)
p0016 : Lens flare override not functional. (Fixed)
p0017 : Scene override fails during scene generation. Wrong line cited on OS X, but Win32 reports correct number. Invalid index to passName. Line 1744 of sceneGen code. (Fixed)
p0018 : Light override causes no image to be saved. (Fixed)
p0019 : Another prepareInputFiles() already called error for alternative object override. (Fixed)
p0020 : Line 2162 and 2168 errors with light override. (Fixed)
p0021 : Broken operation on 11.0.x (Fixed, beta 2). This was complex. We had missed a block end marker change from 11.0 to 11.5 that needed to be adjusted.
p0022 : SaveRGB and filename format lines were missed in scene generation. (Fixed)
p0023 : crash with incorrect output folder (Fixed, beta 2)
p0024 : Windows LW 11.0.x seemed to struggle with the conditional operators. Tweaked the approach (Fixed, beta2)
p0025 : Autoscan plugins operation is broken, leading to issues (Fixed, beta3)
p0026 : 'Save All Passes As Scenes' dialog needs a validation check to ensure the user entered a path, and that it's valid. (Fixed, beta4)
p0027 : Backdrop color not saved by Scene Master override. (Fixed, beta4)
p0028 : Wireframe mode change reported for Scene Master override. (Fixed, beta4)
p0029 : More than 3 lights causes 'exceeds file size' error. (Fixed, beta6)
p0030 : Resolution Multiplier not sticking in camera override. (Fixed, beta6)
p0031 : object replacement override broken in beta 6. Issue was in MotionMixer code. (Fixed, beta7)
p0032 : missed code meant that pass renaming wasn't working. (Fixed, beta8 respin)
p0033 : code regression in override listbox handling. (Fixed, beta8 respin)
p0034 : LScript bug needed working around. (Fixed, beta8 respin)
p0036 : Transient error switching back from Kray-rendered pass to a native-rendered pass when rendering a frame or sequence. Bad size(), line 251. (Assumed resolved w/ 20131002 build for LW 2716+ due to variable system handling.)
p0037 : Physical sky settings array goes MIA due to LScript GC? (Fixed w/ 20131002 build for LW 2716+)
p0038 : Light drop-down in Physical sky needs special handling similar to active camera. (addressing, 20131009+)
p0039 : FFx handling not ideal - need to trim settings for unmatched items in pass. (Fixed w/ 20131016 build)
p0040 : Scene reload error w/ overrideNames. (Fixed, 20131010 - triggered by multiple passes due to incorrect index being used w/ overrideNames array where number of passes > overrides)
p0041 : Radiosity preparation lines code was flawed and could put PPRN into an infinite loop. Code fix was to entirely re-write this code. (20131017)
p0042 : Non-native scene master overrides don't show the scene master item in the RHS listbox. (Fixed w/ 20131024 - timing quirk with req_update() calls that seem to race somehow)
p0043 : Passes rendering with radiosity. (Fixed 20131029, backported to 1.0.8)

###############
# Limitations #
###############

1. Plugin expects to be used as 'Passport_MC', not through the LScript/RT intermediate layer.

:::::::::::::::::::
: Issues to check :
:::::::::::::::::::

- Need to check if growl interaction works with current growl versions.
- 3rd party lights/cameras end of block detection.
- Overriding multiple surfaces on an object. Doable?
- Save/load override configuration files.
- Light type override would make sense?

-------------
- Reference -
-------------

A. settingsarray
----------------

This tracks what is to be done. The 'type' of entity in the array is defined arbitrarily as :

	case 1: "   (.srf file)"
	case 2: "   (object properties)"
	case 3: "   (.mot file)"
	case 4: "   (.lwo file)"
	case 5: "   (light properties)"
	case 6: "   (scene properties)"
	case 7: "   (light exclusion)"
	case 8: "   (Camera)" - EXPERIMENTAL!!!

B. How were override items handled originally?
----------------------------------------------

In the original code, prior to the filtered item list for overrides, the code worked in the manner described below :

1) o_itemslb_event:

	In items listbox, in an override is selected :
		- the selected items are added to the passOverrideItems array for the current pass and selected override.
		- o_items is the index of each selected item in the listbox. This is a fixed list and item 1 is always the (Scene Master) entity.
		- All other items are tracked by their display ID, so the index in o_items has to be decremented by 1 (due to the Scene Master) to correctly locate the displayID associated with the selected item.
		
2) o_parseListItems:

	This returns an index in the listbox for each assigned item in the selected override.
	This is done by using the stored displayID in part 1 to return an index.
	For the 2nd and 3rd items selected, the returned index would be '2 3'
	
3) overrideslb_event:

	This uses o_parseListItems to retrieve the indices of the selected items from the array.

C. How are additional renderers handled?
----------------------------------------

Note that PPRN 1.6 has seen some changes in this area, responding to bug fixes for array/variable handling at a global level. This has also changed the way that some functions are to be called (reducing the arguments).

The original code was only ever written to drive settings for the native renderer. During the rework for PPRN 1.0, the native renderer code was pushed into separate functions and this allowed the support of additional renderers to be enabled. This is achieved by :

 - Preprocessor wrapping of the include statements and function calls to the additional renderer (e.g. enableKray for Kray 2.5 support). This allows, at compile time, the alternative renderer support to be omitted without any errors being reported.
 - The passEditor_globals.ls file has a renderers array variable. The array is used to populate the drop-down menu for the scene master override with human readable labels for render engine choice. It is assumed that the native renderer is the first element in the array. Note that the renderer support is via an index value that is linked to the array position, so you should not re-order the array without reason and due care.
 - Renderer support is modularized by preprocessor. To avoid errors, you must handle the case where the user choices from the renderer drop-down menu and you have not compiled in support for that renderer (i.e. like the current code, show a not implemented message and/or manipulate the text label being shown for the renderer choice). This is unavoidable right now, even though it's irritating for the end-user.
 - In the passEditor_sceneGen_Subfuncs.ls code, where the generation codepath starts for the scene file construction, the index of the external renderer in the renderers array is queried. This is currently hard-coded so we expect the native renderer at index 1, Kray 2.5 at index 2, etc (1-based array index in LScript). This could be refined in a future revision. The fall-through case is the native renderer.
 - The external renderer support is up to the developer to handle.
 - Buffer manipulation, MotionMixer and FiberFX modifications happen after the renderer configuration functions, as part of the scene generation code. No effort is needed for these when implementing additional render engine support. Buffer manipulation implementation should be exposed on the UI as a toggle control - see the native renderer scene master override for an example. Without this control, or a hard-coded value for the setting, the modification will not be done.
 - Active camera handling is left to the developer of the additional render engine support. Kray, for example, does its own thing about active cameras so that we cannot utilise the code from the native renderer support.
 - Registering the alternative renderer in the scene file and managing any existing renderer statements (e.g. activating Arnold when Kray is already defined) is likewise left to the developer. Due to the lack of 3rd party renderer examples, it's not clear whether a generic function could be made available. We do, though, provide a utility to strip instances of external renderers from the scene file because the user may want to use an alternative renderer. It does need to be called by the developer in their code, assuming that they want to use it.
 - Master plugin query for renderer is available in order to determine if the chosen renderer has a settings block in the scene. See getMasterPluginLine() in the parsing functions source file.
 - External renderer query function is also available, to enable handling of that as well.

C.1 How are renderer plugins (e.g. Kray plugins) handled?
---------------------------------------------------------

Physical Sky support is currently under development. The approach taken is to store/retrieve the settings from the main settingsArray for the scene override into a dedicated array. This makes referencing easier in case the main array is restructed.
The main renderer support code must call to the plugin support in order that the split-out array(s) are instantiated and populated with default values (if a new override) or values are retrieved from the main settingsArray into that split-out array.
Dynamic status is not supported in shipping code due to complexity of tracking, although it would conceptually be possible to enable this because of the use of marker entities (see later in this section).
To find the settings in the main settingsArray, a marker is used. In the split-out array, this is maintained in index 0 and never changed. There is no corresponding end marker.
The split-out array is updated when the plugins panel is closed.
The split-out array for each plugin is appended to the main settingsArray when the scene override panel is closed.
Various helper functions exist for this and at this time each plugin has its own. A generic set will be established and utilized before the 1.5 cycle is completed.

The LWtoA support is slightly different because LWtoA writes its settings into the ExternalRenderer section, without any master plugins.
