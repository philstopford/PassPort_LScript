<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="GENERATOR" content="Mozilla/4.5 [en] (Win95; I) [Netscape]">
<meta name="Author" content="Jeremy Hardin, Phil Stopford">
<title>PassPort Renewed</title>

<style type="text/css">
 body {
  background-color: #FFFFFF;
  color: #000000;
 }
 :link { color: #0000BB }
 :visited { color: #000055 }
 :active { color: #FF0000 }
 span.c6 {font-size: 120%}
 td.c5 {background-color: #FF99FF}
 span.c4 {text-decoration: underline}
 li.c3 {list-style: none; display: inline}
 li.c2 {list-style: none}
 div.c1 {text-align: center}
</style>
</head>
<body>
<a name="top"></a>
<div class="c1"><h2>PassPort Renewed</h2></div>
<p align="center"><img src="images/passport_header.png" height="128" width="300" alt="PassPort Logo"></p>
<ul>
<hr>
</ul>
<div class="c1"><a name="toc"></a>
<h2>Table of Contents:</h2>
</div>
<ul>
<li><strong><a href="#whatispassport">What is PassPort Renewed</a></strong></li>
<li><strong><a href="#beforeinstalling">Before Installing</a></strong></li>
<li><strong><a href="#compatibility">Compatibility Notes</a></strong></li>
<li><strong><a href="#installation">Installation</a></strong></li>
<li><strong><a href="#usage">Usage</a></strong></li>
<ul>
<li><a href="#preferences">Preferences Panel</a></li>
<li><a href="#maininterface">Main Interface</a></li>
<li><a href="#workingwithpasses">Working with Passes</a></li>
<li><a href="#workingwithoverrides">Working with Overrides</a></li>
<ul>
<li><a href="#overrides_objprops">Object Properties</a></li>
<li><a href="#overrides_altobj">Alternative Object</a></li>
<li><a href="#overrides_motion">Motion File</a></li>
<li><a href="#overrides_surface">Surface File</a></li>
<li><a href="#overrides_light">Light Properties</a></li>
<li><a href="#overrides_camera">Camera</a></li>
<li><a href="#overrides_scene">Scene Master</a></li>
<ul>
<li><a href="#overrides_scene_native">Scene Master - Native</a></li>
<li><a href="#overrides_scene_kray">Scene Master - Kray 2.5</a></li>
<li><a href="#overrides_scene_lwtoa041">Scene Master - LWtoA 0.4.1</a></li>
</ul>
<li><a href="#overrides_lightexcl">Light Exclusion</a></li>
</ul>
</ul>
<li><strong><a href="#dragons">Things to Be Aware Of</a></strong></li>
<ul>
<li><strong><a href="#dragons_ffx">FiberFX</a></strong></li>
<li><strong><a href="#dragons_dependencies">Dependencies</a></strong></li>
<li><strong><a href="#dragons_lights">Lights</a></strong></li>
<li><strong><a href="#dragons_cameras">Cameras</a></strong></li>
<li><strong><a href="#dragons_comring">Comring</a></strong></li>
</ul>
<li><strong><a href="#troubleshooting">Troubleshooting.</a></strong></li>
<li><strong><a href="#credits">Credits.</a></strong></li>
<li><strong><a href="../changelog_phil.txt">Changelog for PPRN.</a></strong></li>

<hr>
<div class="c1">
<h3><a name="whatispassport"></a>What is PassPort Renewed?</h3>
</div>
<p>PassPort Renewed is an ongoing rework of the LScript-based PassPort code. That code, designed for LightWave 3D 9.3.1, was open-sourced (GPL) by Jeremy Hardin in 2010. It was modified by Matt Gorner in 2010 to improve operation with autoscan plugins and to revise the code to work with LW10. The author of PassPort Renewed is Phil Stopford. Compared to the original PassPort plugin, the code has been largely rewritten and greatly extended in capability and scalability.</p>
<p>These changes were made for the 1.6.x releases:</p>
<ul>
	<li>Enabled support for Kray 2.5</li>
	<ul>
		<li>Not all features are supported at this time.</li>
	</ul>
	<li>Enabled support for Kray 2.5 Plugins</li>
	<ul>
		<li>Physical Sky</li>
		<li>QuickLWF</li>
		<li>ToneMapping</li>
	</ul>
	<li>Enabled support for LWtoA 0.4.1</li>
	<li>Enabled support for dividing FiberFX items across passes</li>
	<li>HyperVoxels 3 elements omitted from passes no longer result in artifacts.</li>
	<li>Enabled support for Relativity dependency handling</li>
	<ul>
		<li>Option to either abort or warn during pass generation for broken dependencies.</li>
	</ul>
	<li>Comring updates (untested)</li>
	<li>RPE version incremented and various fixes to the related code</li>
	<li>Reworked, more robust radiosity settings handling (backported to 1.0.7)</li>
	<li>Revised output folder structure (no more CG folder)</li>
	<li>Restored functionality that strips PPRN from the generated pass scenes</li>
	<ul>
		<li>Oversight in 1.0.x that meant PPRN had to be available on nodes to avoid errors being reported (that could be ignored, but would trip monitoring systems and cause jobs to be re-scheduled)</li>
	</ul>
	<li>Ongoing optimizations of internals</li>
</ul>
<p>All 1.6.x releases require LightWave 3D 11.6 on all platforms.</p>
<p>These changes were made for the 1.0.x releases:</p>
<ul>
	<li>Re-designed for LightWave 3D 11.x</li>
	<li>Extensive internal refactoring. The plugin code is now smaller, more efficient and more cleanly structured.</li>
	<li>Internal support for custom overrides for alternative renderers has been prepared, but implementation is not exposed in the public release at this time.</li>
	<li>Operation on Mac is now possible without crashing.</li>
	<li>Growl support on Mac is optional, and disabled by default</li>
	<li>Operation with the renamed and relocated 'lwsn' binary (previously called ScreamerNet on Mac)</li>
	<li>The item list for overrides is now filtered to only show scene items assigned to the current pass and that are compatible with the selected override type (e.g. lights for light-specific overrides, objects for object-specific overrides)</li>
	<li>The Scene Master override has been massively overhauled and is now aligned with the LightWave 11.0 feature set:</li>
	<ul>
		<li>Render instance setting under LightWave 3D 11.5</li>
		<li>All raytrace flags can be overridden</li>
		<li>Universal sampling parameters can be overridden</li>
		<li>The increased upper value for recursion depth (64) is now supported by the interface</li>
		<li>Volumetric AA can be overridden</li>
		<li>Render mode can be overridden</li>
		<li>Caustics and radiosity values can all be overridden</li>
		<li>Fog, background and backdrop properties can be overriden.</li>
		<li>Radiosity flags can be applied through the scene master as well. Useful for testing different configurations for GI renders.</li>
		<li>The active camera can be chosen from any cameras assigned to the pass.</li>
	</ul>
	<li>The light override now permits disabling of lens flares and volumetrics. Creation is not enabled due to complexities in supporting these. Lens flare creation support may appear in a future revision, though.</li>
	<li>Camera overrides are now available, for the first time. Limited settings are available in this initial public release, and no specialised propeties for 3rd party cameras are available at this time.</li>
	<li>Pass generation for FiberFX has been enabled. Overrides are not available for FiberFX at this time. Please see the workflow note below regarding FiberFX pass generation.</li>
	<li>PassPort has been made LWSN-safe as well. Previously, it used to crash the process.</li>
	<li>Rendering at frame 0 is now supported. Previously, it used to fail to save an image for review.</li>
	<li>Autoscan plugin operation is much improved.</li>
	<li>Buffer Redirect Export extended to work with exrTrader and LightWave's Compositing Buffer Export image filters</li>
	<li>Passes can now be configured to activate/deactivate supported image filters.</li>
	<li>RPE files now contain version information (the RPE version, the PassPort version, the LightWave version).</li>
</ul>
<p></p>
<hr>
<h3><a name="beforeinstalling"></a>Before Installing</h3>
<ul>
<li> This version has compatibility with PPRN 1.0 scenes. You will see some warnings, but they can be safely ignored. RPE files, though, are not compatible due to some flaws in PPRN 1.0.x.</li>
<li> This version continues to have no compatibility with scenes or RPE files from the original PassPort 1.0 plugin. Too much is different between PPRN and PassPort. There is no migration path.</li>
<li> This version is locked to a minimum of LightWave 3D 11.6.</li>
<li>This revision of PassPort has been tested on Windows 7 (64-bit LightWave) and OS X Mountain Lion/Mavericks. For previous versions of LightWave 3D 11.x, please use the 1.0.x releases.</li>
<li>Please note, at the time of writing, PassPort Renewed is a work-in-progress. It's currently implemented in LScript and will eventually be migrated to Python.</li>
<li>3rd party lights and camera features are not available in overrides due to the complexities of supporting them. Only shared properties with the basic light and cameras will be modified.</li>
<li>It is also extremely important that the LightWave 3D content folder is set according to the LightWave 3D documentation.</li>
<li>As of beta 3, operation with autoscan plugins is now supported. There are some things to be aware of :</li>
<ul>
	<li>Autoscan plugins stores its data in a different file to the classical mode of operation for LW. In manual mode, the typical configuration file is named LWEXT.CFG (or some variation thereof). In autoscan mode, the plugin data is stored in some variation of 'Extensions Cache' in the same location. PassPort will read both of these files to obtain image saver data. If there is duplicate data in each file (e.g. two instances of JPEG savers) because you switched off autoscan plugins, but the cache file exists, PassPort will find and display both instances. LightWave doesn't offer a mechanism to avoid this. So, please review your configuration folder in cases like this to ensure nothing strange happens.</li>
</ul>
</ul>
<h3><a name="compatibility">Compatibility Notes</h3>
<p><strong>Scenes and RPE files created with the original version of PassPort are *not* compatible with PassPort Renewed. Too much has changed. Any existing scenes should be loaded into Layout *without* PassPort added to the plugin configuration and then saved out to a new file in order to strip the PassPort section. You can then re-add PassPort to Layout and re-create your passes and overrides in PassPort Renewed.</strong></p>
<p>There is no plan, right now, to migrate settings in RPE files or scene between PassPort versions (where major changes are made) and LW versions. Settings *may* be fine (changes will be noted in the release notes), but for safety, PassPort will show a dialog for each of</p>
<ul>
<li>A different version of PassPort than was in-use when the scene or RPE file was saved.</li>
<li>A different version of LW than was in-use when the scene or RPE file was saved.</li>
</ul>
<p>The expected versions of each are shown to guide the user in case they want to adopt a matching configuration. In each case, the plugin will load its settings from the scene or RPE file, but the results cannot be guaranteed. Some override options may not apply/may be incorrect/may results in crashes during PassPort or render operations. Some changes may even cause PassPort to fail to open its interface. No data loss will occur - PassPort itself never writes to the master scene except when the user explicitly saves the scene through LightWave.</p>
<p><strong>If a scene or RPE file is saved in this state, the version strings currently in use will be written out to PassPort data block within that file. This will silence any future warnings for this file, but the PassPort data block may still be problematic. It is strongly recommended that the user either adopt a compatible configuration or re-create the pass and overrides they need prior to saving the scene or RPE file.</strong></p>
<hr>
<h3><a name="installation"></a>Installation</h3>
<p>The package consists of PassPort_MC.lsc. This has to be added to the plugin system and used directly from the Master Plugins drop-down list. The plugin will *not* function correctly if operated through the LScript/RT Master Plugin system.</p>
<hr>
<h3><a name="usage"></a>Usage</h3>
<ul>
<p><a name="preferences"></a><strong>Preferences Panel</strong></p>
<p>PassPort needs some basic necessary information to be input via its preference panel. This panel can be brought up by highlighting the PassPort Editor and hitting the lowercase o key, or by choosing File... &gt;&gt; Preferences.</p>
<p align="center"><img src="images/preferences.png" height="522" width="436" alt="Preferences Panel"></p>
<p>For the output folder, use the browse button to choose a folder where the frames will be written on render. This serves the same function as LightWave’s render output location, but the name is derived from the Render file prefix and the User field. Be sure to leave the parentheses and the words (leave empty) in the output folder field.</p>
<p>On Mac, the preference dialog provides an option whether or not to use growl for notification. Note that the Notification Center in Mountain Lion is not usable because this is only available to App Store applications. There are 3rd party re-routing systems to pass growl messages to the Notification Center, if that is desired.</p>
<p>The default configuration is to error out if <a href="#dragons_dependencies">dependencies</a> are not found. Currently, the only dependencies that are checked are for Relativity expressions. In some cases, the user might not want to error out because the broken dependencies are intentional. Deselecting the 'Error on missing dependencies' checkbox will change those errors into warnings.</p>
<p>Enable confirmation dialogs lets you get the usual “Are you sure...” prompt before doing anything drastic. Uncheck to remove these for faster operation.</p>
<p>Editor resolution is the size of the PassPort Editor window. You can also quickly scroll through these sizes after the Editor is open by using the plus (+) and minus(-) keys.</p>
<p>The next several options are render settings.  When you render a whole sequence, the first RGB type you choose will be used for the sequence render. If you were familiar with the old PassPort system, you might expect to find test render resolution multipliers here - due to the new camera and scene master overrides, the old test resolution multiplers have been removed. You can choose from any available image format in LW - including any formats supported by 3rd party addons such as exrTrader. Please note, though, that there is no ability to configure options related to these formats.</p>

<p><a name="maininterface"></a><strong>Main Interface</strong></p>
<p>On run, the main interface pops up. It is non-modal, so you can close and reopen at will. The main interface consist of top items, 2 listboxes, and bottom items.</p>
<p align="center"><img src="images/passport_passes.png" height="562" width="640" alt="Main Interface"></p>
<p>The File... pulldown is how preferences are changed, passes are exported as scenes, and renders are accomplished. You’ll use this to render test frames, render full individual passes, and render all the passes in one go.  Items that have quick-keys have the correct quick-key combination on the right. This is true throughout the interface.
</p>
<p align="center"><img src="images/file_menu.png" height="238" width="183" alt="File Menu"></p>
<p>Beside this is the pulldown for active pass selection. The pass selected here will be the one that renders. Also, override assignments (in the overrides tab) are applied to the selected pass. So assignments for one pass will be different with a different pass chosen in the Current Pass... pulldown.</p>
<p>Bottom items correspond to the listbox above them. Those on the left are for the left listbox (either passes or overrides, depending on which tab is selected), and those on the right are for the right listbox.  Under the right listbox, you’ll find quick methods of adding and removing multiple items to each pass or override assignment. Add All is self explanatory. Add Sel gets the item(s) selected in Layout and adds only those items to the existing, compatible, assignments. The Clear All and Clear Sel functions are obviously the inverse of the add buttons.</p>

<p><a name="workingwithpasses"></a><strong>Working With Passes</strong></p>
<p>If you’ve ever had to create an object copy just for a data pass and then had to create a copy of the scene for all your object copies, you know how difficult a multi-pass workflow is in LightWave. With PassPort Renewed, these problems are greatly reduced. There's no need to have ten copies of your object for your passes (even if they have different surfaces - including nodal systems), nor is there a need for scenes with various lights or objects omitted. PassPort Renewed massively extends this to most common camera setting variations and to the vast majority of rendering settings, as well as FiberFX pass generation. Somewhat counterintuitively perhaps, you need to add cameras to the pass in order for the override system to handle them. This is to enable the active camera override feature in the Scene Master override. If you fail to add a camera to a pass, the system will use the first camera in the scene when a pass scene file is generated or rendered.</p>
<p>You can create a full scene pass (with all scene items assigned to it), an empty pass (nothing is assigned to the new pass), create a pass containing the items currently selected in Layout or duplicate an existing pass using the menu.</p>
<p align="center"><img src="images/passes_menu.png" height="80" width="175" alt="Passes Menu"></p>
<p>When you choose an option, such as the new full scene pass, from this menu, you will be presented with a dialog like the one below. Here, you can name your pass. If you have set up image filter-based exporters in the scene (e.g. LW 11's Compositing Buffer Exporter, exrTrader, etc.), you can also tell PassPort whether or not you want them to be used to save renders for this pass. An active checkbox enables the respective filter for the pass. A cleared checkbox will disable the respective filter for the pass. The top-most checkbox allows you to control whether or not the subsequent checkboxes should have any effect - it's a convenience in case you want switch the handling on or off without losing your settings. If you enable a checkbox, but the filter is not present in the scene, there will be no effect - PassPort only works on those filters you have set-up. Note that this works with the buffer redirect option so any images from these filters will contain the pass name, as you would expect.</p>
<p align="center"><img src="images/passes_dialog.png" height="347" width="436" alt="Passes Dialog"></p>
<p>When it comes time to render, just use the PassPort Editor to render the sequence. If you’ve got access to a render farm, choose Save Pass as Scene... and that pass will be used to create a standard LightWave scene file that you can submit to your render farm at will.</p>
<p>The method is simple. Select a pass, then select an object, camera or light on the right listbox. That newly highlighted item is now a part of the selected pass.  CTRL click the item again to remove it from the pass.</p>

<p><a name="workingwithoverrides"></a><strong>Working With Overrides</strong></p>
<p align="center"><img src="images/passport_overrides.png" height="562" width="640" alt="Overrides Interface"></p>
<p>Here’s where the real power of the PassPort Editor comes in. In each pass, you can specify a combination of Overrides that change an item’s properties or appearance, but just for that pass. So if you’re doing a shadow pass, you can have the shadow casting objects Unseen By Camera, even though that is not the case in the LightWave scene.</p>
<p>There are eight types of overrides.</p>
<p align="center"><img src="images/override_menu.png" height="178" width="177" alt="Overrides Menu"></p>
<p>When applied, these will override any parameter they cover. In other words, if the parameter exists in any state in the overrides, the override parameter will be used instead of the native LightWave parameter (please refer to the light override note for the volumetric setting). Also, there’s a bit of common sense in working with these. The PassPort Editor will only show items that are compatible with the selected override.</p>
<ul>
	<p><a name="overrides_objprops"></a><strong>Object Properties</strong></p>
	<p align="center"><img src="images/override_objprops.png" height="342" width="275" alt="Object Properties Override"></p>
	<p><a name="overrides_altobj"></a><strong>Alternative Object</strong></p>
	<p align="center"><img src="images/override_altobj.png" height="108" width="284" alt="Alternative Object Override"></p>
	<p><a name="overrides_motion"></a><strong>Motion File</strong></p>
	<p align="center"><img src="images/override_motion.png" height="108" width="285" alt="Motion Override"></p>
	<p><a name="overrides_surface"></a><strong>Surface File</strong></p>
	<p align="center"><img src="images/override_surface.png" height="108" width="284" alt="Surface Override"></p>
	<p><a name="overrides_light"></a><strong>Light Properties</strong></p>
	<p align="center"><img src="images/override_light.png" height="262" width="275" alt="Light Properties"></p>
	<p>Please note that, due to the way that LightWave 11 currently generates its scene files, the volumetric toggle will only work if the light being overridden had its volumetric properties set up through the main LW interface. The volumetrics can be deactivated within LW afterwards for that light - this override will then work fine. This is because LightWave will not write out the volumetric settings properly unless you have set them. There's also an element of common sense here - unless you've configured the volumetric light behaviour ahead of time on the light, how will the renderer know what to do. Note that the Scene Master override provides support for globally enabling/disabling volumetric lights (corresponding to the setting in LW's own render control panel).</p>
	<p>In this version, the lens flare override is limited to a toggle. This may be supplemented by other options in a future revision. Note that the Scene Master override provides support for globally enabling/disabling lens flare (corresponding to the setting in LW's own render control panel).</p>
	<p><a name="overrides_camera"></a><strong>Camera Properties</strong></p>
	<p align="center"><img src="images/override_camera.png" height="347" width="590" alt="Camera Override"></p>
	<p><a name="overrides_scene"></a><strong>Scene Master</strong></p>
	<p>As of PPRN 1.4.x, Kray 2.5 support is implemented in a Scene Master override. Creating a new scene master override will cause a menu to be display to determine the type of scene master override that is desired. Note that the Kray support is still in-progress and some features that are exposed may not make sense in the context of PPRN operation and may therefore be withdrawn as development proceeds.</p>
	<p align="center"><img src="images/override_scene_menu.png" height="90" width="306" alt="Scene Master Menu"></p>
	<ul>
	<p><a name="overrides_scene_native"></a><strong>Scene Master - Native</strong></p>
	<p align="center"><img src="images/override_scene.png" height="747" width="885" alt="Scene Master Override"></p>
	<p>'Render Instances' toggles instance rendering.</p>
	<p>'Redirect Buffer Export Paths' works with a number of image filters to redirect their output into pass-specific named files. The filters have to be configured with a valid save path (only the filenames will be changed!) and to save all information that you are interested in for all passes that you will be rendering. Passport does not attempt to adjust other settings - the range of settings and options would greatly complicate this plugin and lead to compatibility issues very quickly.</p>
	<ul>
		<li>LightWave's Compositing Buffer Export</li>
		<li>exrTrader</li>
		<li>LightWave's RLA Export</li>
		<li>LightWave's Extended RLA Export</li>
		<li>LightWave's PSD Export</li>
		<li>LightWave's Extended RPF Export</li>
		<li>LightWave's Aura 2.5 Export</li>
		<li>iDOF Channel Export</li>
	</ul>
	<p>This panel also offers a toggle for LightWave's Adaptive Sampling. In LightWave, this is a global setting, affecting all cameras. The threshold value is camera-specific and can be overridden using a camera override.</p>
	<p>The scene master is also where you can override the active camera for the pass. All cameras assigned to the pass will be contained in the scene file generated; this override will only change the setting that denotes which camera is active.</p>
	<p>A pass and override system is not just for final renders. It can be very useful to try and determine the best render conditions for a given scene. To that end, PassPort Renewed also allows you to apply Radiosity Flag settings in the Scene Master override. You can then explore how different GI settings affect the renderer in LW in a systematic manner.</p>
	<p align="center"><img src="images/override_scene_radflags.png" height="254" width="306" alt="Scene Master Radiosity Flags Override"></p>
	</ul>
	<ul>
	<p><a name="overrides_scene_kray"></a><strong>Scene Master - Kray 2.5</strong></p>
	<p>These screenshots indicate the subset of features currently supported by PPRN. Note that Kray's plugin system is also handled, but not reflected in the screenshots below. Note also that some features may be withdrawn as development proceeds due to the unsuitability of their combination with PPRN.</p>
	<p>The scene override can be used to override pre-existing settings for Kray, or to apply Kray to a scene that has not had it implemented outside of PPRN. Note, though, that not all features are exposed - if you want the full range of Kray features, you may need to set up a Kray scene and then override it with the subset of features exposed in PPRN.</p>
	<p>Rendering of Kray overrides is performed by Kray itself, so licenses must be in-order.</p>
	<p align="center">
	<img src="images/override_scene_kray_general.png" height="636" width="432" alt="Kray Tab - General">&nbsp;
	<img src="images/override_scene_kray_photons.png" height="640" width="432" alt="Kray Tab - Photons"><br>
	<img src="images/override_scene_kray_finalgather.png" height="639" width="434" alt="Kray Tab - Final Gather">&nbsp;
	<img src="images/override_scene_kray_sampling.png" height="638" width="432" alt="Kray Tab - Sampling"><br>
	<img src="images/override_scene_kray_quality.png" height="638" width="434" alt="Kray Tab - Quality">&nbsp;
	<img src="images/override_scene_kray_misc.png" height="638" width="434" alt="Kray Tab - Misc"><br>
	<img src="images/override_scene_kray_physicalsky.png" height="731" width="440" alt="Kray Tab - Plugins - Physical Sky">&nbsp;
	<img src="images/override_scene_kray_quicklwf.png" height="251" width="293" alt="Kray Tab - Plugins - QuickLWF"></p>
	</ul>
	<p><a name="overrides_lightexcl"></a><strong>Light Exclusion</strong></p>
	<p align="center"><img src="images/override_lightexcl.png" height="158" width="306" alt="Light Exclusion"></p>
	<p>The Light Exclusions override allows you to specify per-pass light exclusions. Assigning it to an object will exclude that object from any lights in the override settings in that pass. The Light Exclusions override is unique in that it can be assigned in addition to another override. So if you want to use a surface override AND a light exclusion override, you’d simply have the surface override higher in the overrides listbox and assign both to an object. If you ever find that the light exclusion is higher in the listbox than another override (and therefore preventing its stack-ability), simply hit Page Down on your keyboard to move the selected override to the bottom of the listbox.</p>
	</ul>
	<ul>
	<p><a name="overrides_scene_lwtoa041"></a><strong>Scene Master - LWtoA 0.4.1</strong></p>
	<p>LWtoA 0.4.1 is also fully supported in PPRN 1.6.x. Note that LWtoA itself is in heavy development. Unlike Kray, all features of Arnold supported by LWtoA are exposed in PPRN; you can override existing settings from a LWtoA scene or set up LWtoA only within PPRN. Rendering, like Kray, is not performed by PPRN itself so license constraints are not avoided at any time.</p>
	<p align="center">
	<img src="images/override_scene_lwtoa041_system.png" height="892" width="467" alt="LWtoA 0.4.1 System Tab">&nbsp;
	<img src="images/override_scene_lwtoa041_sampling.png" height="890" width="465" alt="LWtoA 0.4.1 Sampling Tab"><br>
	<img src="images/override_scene_lwtoa041_rays.png" height="888" width="468" alt="LWtoA 0.4.1 Rays Tab">&nbsp;
	<img src="images/override_scene_lwtoa041_misc.png" height="889" width="468" alt="LWtoA 0.4.1 Misc Tab"><br>
	<img src="images/override_scene_lwtoa041_debug.png" height="890" width="468" alt="LWtoA 0.4.1 Debug Tab">&nbsp;
	<img src="images/override_scene_lwtoa041_ass.png" height="892" width="470" alt="LWtoA 0.4.1 ASS Tab"><br>
	<img src="images/override_scene_lwtoa041_text.png" height="892" width="470" alt="LWtoA 0.4.1 Text Tab">&nbsp;
	<img src="images/override_scene_lwtoa041_aovs.png" height="892" width="470" alt="LWtoA 0.4.1 AOVs Tab">	</p>
</ul>
<h3><a name="dragons"></a>Things to be Aware Of</h3>
<ul>
	<h4><a name="dragons_ffx"></a>FiberFX</h4>
<p>FiberFX, as of 11.5, permits its contributions to be written out to external files. We allow you to override the destination. However, by-design, FiberFX will write out all contributions from elements in the frame to a single file.</p>
<p>Happily, you can use passes to break out FiberFX contributions to different files - PPRN 1.6.x enables you to have the freedom to use FiberFX elements with passes without issue. You no longer have the PPRN 1.0.x restriction of bundling all such elements into a single pass because of crash issues - PPRN does all the work for you to make FiberFX play nicely.</p>
<h4><a name="dragons_dependencies"></a>Dependencies</h4>
<p>Any item not contained in a pass will be omitted from the pass scene file that is generated by PassPort. This means that any dependencies on that item will be broken in that scene, such expressions. You can typically find a different methodology using an override to hide the item from the renderer (visibility flags, motion overrides, etc.). Note that PPRN 1.6.x onwards will report Relativity dependency errors for the pass. Other systems are not currently handled.</p>
<h4><a name="dragons_lights"></a>Lights</h4>
<p>LightWave expects at least one light in a scene, and PassPort also expects at least one light in a pass in order to reliably generate the scene. To that end, if you haven't assigned any lights, PassPort will automatically add the first light in the scene to the generated scene file. If you really don't want any lighting in a pass, you have a number of options - you can create a dummy light and assign it to the pass(es), you can use light exclusion or you can use a light override.</p>
<h4><a name="dragons_cameras"></a>Cameras</h4>
<p>LightWave expects at least one camera in a scene, and PassPort also expects at least one camera in a pass in order to reliably generate the scene. To that end, if you haven't assigned any cameras, PassPort will automatically add the first camera in the scene to the generated scene file. This might not be the active camera, though, so results may be odd.</p>
<h4><a name="dragons_comring"></a>Comring</h4>
<p>PPRN 1.0.x likely had comring issues, but no-one reported them. PPRN 1.6.x has seen work to resolve these problems, but this work has not been tested at the time of writing.</p>
</ul>
<h3><a name="troubleshooting"></a>Troubleshooting</h3>
<p>Overrides cannot be stacked on an object in a pass (with the exception of the Light Exclusions override).  For example, you cannot apply both a motion override and a surface override to the same object in the same pass. Note that this will cause a failure even if the issue is located in a pass other than the one you are rendering. The error message will also be very ugly and scary. You'll have to manually figure out what you did wrong, fix it up and try again.</p>
<p>Bullet points may not be drawn even when items have been assigned to an override. The items have been assigned, but the LScript system, on which PassPort Renewed is currently based, occasionally seems to struggle to repaint the UI correctly. You can force an update using the Rebuild command in the File menu.</p>
<p>Also, the quick-keys very rarely get confused after pass creation or editing and then they think you’ve hit the delete key (and therefore try to delete a pass/override). As of now, the only way to prevent this it to keep the confirmation prompts enabled in the preferences and cancel the pass deletion when it asks.</p>
<p>3rd party lights and cameras will probably have trouble with the overrides.</p>

<h3><a name="credits"></a>Credits</h3>
</div>
<p>PassPort Renewed would not exist without the original PassPort code that was so generously open-sourced by its creator, Jeremy Hardin</p>
<p>PassPort Renewed would also not exist without the patient understanding of my wife, Pallavi Menon</p>
<p>Matt Gorner's work to make the original PassPort compatible with LightWave through 10.0 is much appreciated, as well as his effort to get the source uploaded to SourceForge. I'm also very grateful for his help in showing me some of the UI tricks that could be performed in LScript.</p>
<p>I also have to thank James Willmott and Lernie Ang for their help as I fought my way to understanding (somewhat) LScript and its quirks. Jeremy gets another nod here for sending me his notes and insight.</p>
<p>Deuce Bennett , patient master bug wrangler at NT - thanks ever so much for fielding various bug reports along the way.</p>
<p>Thanks to Bob Hood for the LScript fixes for Mac in LightWave 11.5, and for continuing to address issues with LightWave 3D 11.6. Without his help, a whole slew of the 1.6.x featureset would not have been achievable.</p>
<p>Thanks go to the Kray developers for allowing me to use their LScript UI code (including Matt Gorner's refinements) in the PPRN codebase to enable Kray 2.5 support</p>
<p>Thanks to SolidAngle and Juanjo González for enabling me to develop the LWtoA support.</p>
<p>This plugin's failings and bugs are mine alone. Its robustness and ability are in large part due to the enthusiasm and diligence of the testing crew :</p>
<ul>
<p>1.0:</p>
<li>Luis Lopes (zardoz) : bug reporter in chief, I'm in your debt.</li>
<li>Javier Meroño (Netvudu) : the man who requested, quite robustly, the image filter export handling for passes. It's thanks to Javier's bug report that autoscan operation is properly handled now.</li>
</ul>
</body>
</html>
